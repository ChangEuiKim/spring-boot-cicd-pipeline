name: Spring Boot CI/CD Pipeline

# STEP1: Main Branch에 push 또는 pull request가 발생할 때 실행한다.
on:
  push:
    branches: ['dev'] # 비활성화를 위해 main -> dev로 브랜치 변경
  pull_request:
    branches: ['dev'] # 비활성화를 위해 main -> dev로 브랜치 변경

jobs:
  # STEP2: SpringBoot_CI_CD_Pipeline이라는 Job을 실행한다.
  SpringBoot_CI_CD_Pipeline:
    # 최신 버전의 Ubuntu에서 실행한다.
    runs-on: ubuntu-latest

    steps:
      # STEP3: CI (1) 공식 Checkout Action을 사용해 저장소의 코드를 가져온다.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # STEP4: CI (2) 공식 Setup Java Action을 사용해 Amazon Corretto 17을 설치한다.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      # STEP5: CI (3) Gradle Wrapper를 실행하기 위해 실행 권한을 부여한다.
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      # STEP6: CI (4) Gradle Wrapper를 사용해 Spring Boot 프로젝트를 빌드한다.
      - name: Build Spring Boot Project with Gradle Wrapper
        run: ./gradlew clean build

      # STEP7: CI (5) Dockerfile을 사용해 Docker 이미지를 빌드한다.
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

      # STEP8: CI (6) 공식 Docker Login Action을 사용해 Docker Hub에 로그인한다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # STEP9: CI (7) Docker 이미지를 Docker Hub에 푸시한다.
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

      # STEP10: CD (1) haythem의 Public IP Action을 사용해 GitHub Actions Runner의 Public IP를 steps.ip.outputs.ipv4로 가져온다.
      - name: get Runner's Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      # STEP11: CD (2) 공식의 "Configure AWS Credentials" Action을 사용해 IAM 계정의 AWS Credentials를 설정한다.
      - name: Configure AWS IAM credentials in repository secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # STEP12: CD (3) AWS EC2의 보안그룹의 TCP 22번 포트에 GitHub Actions Runner의 Public IP를 추가한다.
      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.AWS_SG_ID }} \
          --protocol tcp --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # STEP13: CD (4) appleboy의 SSH Remote Commands Action을 사용해 AWS EC2에 접속해 Docker 컨테이너를 실행한다.
      - name: Executing remote ssh commands using password with AWS EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop github-actions-demo \
            && sudo docker rm github-actions-demo \
            && sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo \
            || true
            sudo docker run -it -d -p 8080:8080 \
            --name github-actions-demo ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

      # STEP14: CD (5) AWS EC2의 보안그룹의 TCP 22번 포트에 GitHub Actions Runner의 Public IP를 삭제한다.
      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.AWS_SG_ID }} \
          --protocol tcp --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32
